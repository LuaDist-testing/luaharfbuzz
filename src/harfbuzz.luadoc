-----------
-- Lua bindings to Harfbuzz.
-- * [Wiki](http://github.com/deepakjois/luaharfbuzz/wiki)
-- * [Source on Github](https://github.com/deepakjois/luaharfbuzz)
-- * [API Coverage Status](https://github.com/deepakjois/luaharfbuzz/blob/master/status/done.txt)
--
-- @author Deepak Jois <<deepak.jois@gmail.com>>
-- @copyright 2016
-- @license MIT
-- @module harfbuzz

--- Wraps `hb_version`
-- @function version

--- Wraps `hb_shape`.
--  @param font `Font` to use for shaping
--
--  @param buffer `Buffer` to shape
--
--  @param[opt] options table containing one or more supported options:
--
--  * `direction`: one of `rtl`, `ltr`, `ttb` or `btt`.
--  * `script`: [four-letter script tag](http://www.microsoft.com/typography/otspec/scripttags.htm).
--  * `language`: [three-letter language tag](http://www.microsoft.com/typography/otspec/languagetags.htm).
--  * `features`: features to enable, specified as either of the following.
--    - comma-separated list of features. See [feature string syntax reference](https://github.com/deepakjois/luaharfbuzz/wiki/Feature-Strings)
--    - table of `Feature` objects
--  @function shape

--- Lua wrapper for `hb_blob_t` type
--  @type Blob

--- Wraps `hb_blob_create`.
--  Initializes a new `hb_blob_t`.
--  @param data lua string containing binary or character data.
--  @function Blob.new

--- Wraps `hb_blob_get_length`.
--  @function Blob:get_length

--- Lua wrapper for `hb_face_t` type
--  @type Face

--- Wraps `hb_face_create`.
--  Initializes a new `hb_face_t` from a `Blob` object.
--  @param blob `Blob` to read the font from.
--  @param[opt=0] font_index index of font to read.
--  @function Face.new_from_blob

--- Create a new `Face` from a file.
--  Makes a call to `Face:new_from_blob` after creating a `Blob` from the
--  file contents.
--  @param file path to font file.
--  @param[opt=0] font_index index of font to read.
--  @function Face.new

--- Wraps `hb_face_get_upem`.
--  @function Face:get_upem


--- Lua wrapper for `hb_font_t` type
--  @type Font

--- Wraps `hb_font_create`, and sets up some defaults for scale and shaping functions.
--  Initializes a new `hb_font_t` from a `Face` object. Sets the default scale
--  to the face’s upem value, and sets the font shaping functions by
--  calling `hb_ot_font_set_funcs` on it.
--  @param face `Face` object.
--- Wraps `hb_font_get_scale`
--  @function Font:scale

--- Wraps `hb_font_get_scale`.
--  @return two values for the x-scale and y-scale of the font.
--  @function Font:get_scale

--- Wraps `hb_font_set_scale`.
--  @param x_scale desired x-scale of font.
--  @param y_scale desired y-scale of font.
--  @function Font:set_scale

--- Lua wrapper for `hb_buffer_t` type.
--  @type Buffer

--- Wraps `hb_buffer_create`.
--  @function Buffer.new

--- Wraps `hb_buffer_add_utf8`.
--  @param text UTF8 encoded string.
--  @param[opt=0] item_offset 0-indexed offset in `text`, from where to start adding.
--  @param[opt=-1] item_length length to add from `item_offset`. `-1` adds till end of `text`.
--  @function Buffer:add_utf8

--- Wraps `hb_buffer_add_codepoints`.
--  @param text table with codepoints as lua numbers.
--  @param[opt=0] item_offset 0-indexed offset in `text`, from where to start adding.
--  @param[opt=-1] item_length length to add from `item_offset`. `-1` adds till end of&nbsp;`text`.
--  @function Buffer:add_codepoints

--- Wraps `hb_buffer_set_direction`.
--  @param dir  one of `rtl`, `ltr`, `ttb` or `btt`.
--  @function Buffer:set_direction

--- Wraps `hb_buffer_get_direction`.
--  @function Buffer:get_direction

--- Wraps `hb_buffer_set_script`.
--  @param script [four-letter script tag](http://www.microsoft.com/typography/otspec/scripttags.htm).
--  @function Buffer:set_script

--- Wraps `hb_buffer_get_script`.
--  @function Buffer:get_script

--- Wraps `hb_buffer_set_language`.
--  @param lang [three-letter language tag](http://www.microsoft.com/typography/otspec/languagetags.htm).
--  @function Buffer:set_language

--- Wraps `hb_buffer_get_language`.
--  @function Buffer:get_language

--- Wraps `hb_buffer_reverse`.
--  @function Buffer:reverse

--- Wraps `hb_buffer_get_length`.
--  @function Buffer:get_length

--- Wraps `hb_buffer_get_cluster_level`.
--  @return see [Cluster Levels](#Cluster_Levels)
--  @function Buffer:get_cluster_level

--- Wraps `hb_buffer_set_cluster_level`.
--  @param level see [Cluster Levels](#Cluster_Levels)
--  @function Buffer:set_cluster_level

--- Wraps `hb_buffer_guess_segment_properties`.
--  @function Buffer:guess_segment_properties

--- Helper method to get shaped glyph data.
--  Calls `hb_buffer_get_glyph_infos` and `hb_buffer_get_glyph_positions`
--  and assembles the data into a Lua table.
--  @return table containing data for each glyph, in a nested table. Each nested
--  table contains the following:
--
--  * `x_advance`: horizontal advance.
--  * `y_advance`: vertical advance.
--  * `x_offset`: horizontal displacement.
--  * `y_offset`: vertical displacement.
--  * `cluster`: glyph cluster index within input.
--  * `codepoint`: glyph index inside the font _(this field name is a bit misleading, but that’s what Harfbuzz uses)_.
--  @function Buffer:get_glyphs_and_positions

--- Lua wrapper for `hb_feature_t` type
--  @type Feature

--- Wraps `hb_feature_from_string`
--  @param feature_string See [feature string syntax reference](https://github.com/deepakjois/luaharfbuzz/wiki/Feature-Strings)
--  @function Feature.new

--- Wraps `hb_feature_to_string`.
--  Enables nice output with `tostring(…)`.
--  @function Feature:__tostring

--- Cluster Levels
--  @section

--- Wraps `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES`.
--  @field Buffer.HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES

--- Wraps `HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS`.
--  @field Buffer.HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS

--- Wraps `HB_BUFFER_CLUSTER_LEVEL_CHARACTERS`.
--  @field Buffer.HB_BUFFER_CLUSTER_LEVEL_CHARACTERS

--- Wraps `HB_BUFFER_CLUSTER_LEVEL_DEFAULT`.
--  @field Buffer.HB_BUFFER_CLUSTER_LEVEL_DEFAULT
